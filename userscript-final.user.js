"use strict";
const htmlCode = "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Ã“rarend</title>\n\n    <!-- These tags are replaced by the JS and CSS files by `build.mjs` -->\n    <style>#timetable-column {\n  --row-gap: 0.05em;\n  --extra-width: 0.1em;\n  display: grid;\n  grid-auto-columns: fit-content(20em);\n  row-gap: var(--row-gap);\n  column-gap: 1em;\n  overflow-x: hidden;\n  padding-bottom: 2em;\n  height: 90vh;\n}\n#timetable-column > div {\n  border: 1px solid black;\n  background-color: white;\n}\n#timetable-column .time-marker {\n  border: none;\n  padding: 0;\n}\n#timetable-column .time-marker {\n  /* move the times (& > *) to the bottom */\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  background-color: transparent;\n}\n#timetable-column .time-marker > * {\n  /* move time (&) onto gridlines */\n  translate: 0 calc(50% + var(--row-gap) / 2);\n  background-color: white;\n  padding: 0 5px;\n  border: 1px solid black;\n}\n#timetable-column .time-marker {\n  position: relative;\n}\n#timetable-column .time-marker::after {\n  content: \"\";\n  position: absolute;\n  display: block;\n  translate: 0 calc(var(--extra-width) / 2 + var(--row-gap));\n  width: 100vw;\n  border-top: calc(var(--extra-width) + var(--row-gap)) dashed gray;\n  z-index: -1;\n}\n\n/*# sourceMappingURL=index.css.map */\n</style>\n    <script>\"use strict\";\nfunction time(hh, mm) {\n    return hh * 60 + mm;\n}\nfunction formatTime(t) {\n    return `${Math.floor(t / 60)}:${Math.floor(t % 60).toString().padStart(2, '0')}`;\n}\nfunction addLaneToCourse(course, lane) {\n    return { ...course, lane };\n}\nfunction assignToLanes(courses) {\n    courses.sort((a, b) => a.start - b.start);\n    let lanes = 0;\n    const freeLanes = new Set;\n    const endsOfOngoing = [];\n    const coursesWithLanes = courses.map(course => {\n        while (endsOfOngoing.length > 0 && endsOfOngoing.at(-1).end <= course.start) {\n            const popped = endsOfOngoing.pop();\n            freeLanes.add(popped.lane);\n        }\n        if (freeLanes.size === 0) {\n            freeLanes.add(lanes++);\n        }\n        const lane = freeLanes.keys().next().value;\n        freeLanes.delete(lane);\n        const courseWithLane = addLaneToCourse(course, lane);\n        const binarySearch = (arr, target) => {\n            let start = 0;\n            let end = arr.length;\n            while (start < end) {\n                const middle = Math.floor((start + end) / 2);\n                if (arr[middle].end > target) {\n                    start = middle + 1;\n                }\n                else {\n                    end = middle;\n                }\n            }\n            return start;\n        };\n        const index = binarySearch(endsOfOngoing, course.end);\n        endsOfOngoing.splice(index, 0, courseWithLane);\n        return courseWithLane;\n    });\n    return [lanes, coursesWithLanes];\n}\nfunction createTimeMap(courses) {\n    const times = new Set;\n    for (const course of courses) {\n        times.add(course.start);\n        times.add(course.end);\n    }\n    const timesSorted = [...times].sort((a, b) => a - b);\n    const timeMap = new Map();\n    for (let i = 0; i < timesSorted.length; i++) {\n        timeMap.set(timesSorted[i], i);\n    }\n    return timeMap;\n}\nfunction render(grid, courses, timeMap, colOffset, rowOffset) {\n    for (let i = 0; i < courses.length; i++) {\n        const course = courses[i];\n        const elem = document.createElement('div');\n        elem.textContent = String(i);\n        setCoursePositionInGrid(elem, course, timeMap, colOffset, rowOffset);\n        grid.append(elem);\n    }\n}\nfunction setCoursePositionInGrid(elem, course, timeMap, colOffset, rowOffset) {\n    setPositionInGrid(elem, course.lane + colOffset, course.lane + colOffset + 1, timeMap.get(course.start) + rowOffset, timeMap.get(course.end) + rowOffset);\n}\nfunction setPositionInGrid(elem, colStart, colEnd, rowStart, rowEnd) {\n    elem.style.gridColumnStart = String(colStart + 1);\n    elem.style.gridColumnEnd = String(colEnd + 1);\n    elem.style.gridRowStart = String(rowStart + 1);\n    elem.style.gridRowEnd = String(rowEnd + 1);\n}\nfunction createElement(grid) {\n    return grid.appendChild(document.createElement('div'));\n}\nfunction main() {\n    const courses = [\n        [\n            { start: time(8, 0), end: time(9, 50) },\n            { start: time(15, 20), end: time(17, 0) },\n            { start: time(10, 45), end: time(12, 25) },\n            { start: time(13, 30), end: time(15, 10) },\n            { start: time(12, 35), end: time(14, 15) },\n            { start: time(9, 50), end: time(11, 30) },\n            { start: time(13, 30), end: time(15, 10) },\n        ],\n        [\n            { start: time(8, 0), end: time(9, 40) },\n            { start: time(15, 20), end: time(17, 0) },\n            { start: time(10, 45), end: time(12, 25) },\n            { start: time(13, 30), end: time(15, 10) },\n            { start: time(12, 35), end: time(14, 15) },\n            { start: time(13, 30), end: time(15, 10) },\n            { start: time(13, 30), end: time(15, 10) },\n        ],\n    ];\n    const timeMap = createTimeMap(courses.flat());\n    const grid = document.querySelector('#timetable-column');\n    const timeIter = timeMap.entries();\n    const { done, value: firstEntry } = timeIter.next();\n    if (done) {\n        throw new Error('No items in the timetable');\n    }\n    function addTimeMarkerElem(time) {\n        const timeMarker = createElement(grid);\n        setPositionInGrid(timeMarker, 0, 1, time[1], time[1] + 1);\n        timeMarker.classList.add('time-marker');\n        const timeMarkerInner = timeMarker.appendChild(document.createElement('div'));\n        timeMarkerInner.innerText = formatTime(time[0]);\n    }\n    addTimeMarkerElem(firstEntry);\n    //this relies on the fact that `timeMap` is sorted by time\n    let prevTime = firstEntry;\n    const lengths = [];\n    for (const time of timeIter) {\n        lengths.push(String(time[0] - prevTime[0]) + 'fr');\n        addTimeMarkerElem(time);\n        prevTime = time;\n    }\n    grid.style.gridTemplateRows = `min-content ${lengths.join(' ')}`;\n    let columns = 1;\n    for (const coursesInADay of courses) {\n        const [laneCount, coursesWithLanes] = assignToLanes(coursesInADay);\n        const dayMarker = createElement(grid);\n        setPositionInGrid(dayMarker, columns, columns + laneCount, 0, 1);\n        dayMarker.innerText = 'Day';\n        render(grid, coursesWithLanes, timeMap, columns, 1);\n        columns += laneCount + 1;\n    }\n}\ndocument.addEventListener('DOMContentLoaded', main);\n</script>\n\n</head>\n<body>\n    <div id=\"timetable-column\">\n\n    </div>\n</body>\n</html>"; //This call is replaced by a string literal of the bundled HTML file by `build.mjs`
console.log(htmlCode);
